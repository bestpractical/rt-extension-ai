% $r->content_type('application/json; charset=utf-8');
<%ARGS>
$rawText => ''
$callType => ''
$transFrom => ''
$transTo => ''
</%ARGS>

<%INIT>
use RT;
use RT::Config;
use HTTP::Request;
use LWP::UserAgent;
use JSON;

# Load RT Config
RT->LoadConfig;
my $config = RT->Config;

# Retrieve OpenAI API configurations
my $openai_api_key = $config->Get('OpenAI_ApiKey');
my $api_url = $config->Get('OpenAI_ApiUrl');
my $prompts = {
    adjustTone   => $config->Get('AdjustTone'),
    aisuggestion => $config->Get('AiSuggestion'),
    translate    => $config->Get('Translate'),
    autocomplete => $config->Get('Autocomplete'),
};

# Retrieve model configurations
my $general_model    = $config->Get('GeneralAIModel')->{modelDetails};
my $autocomplete_model = $config->Get('AutoCompleteModel')->{modelDetails};

RT->Logger->info("Received AI request: rawText = '$rawText', callType = '$callType', transFrom = '$transFrom', transTo = '$transTo'");

unless ($openai_api_key && $api_url) {
    $m->abort("Missing OpenAI API key or URL");
}

my $prompt_type = $callType || 'aisuggestion';
my $prompt = $prompts->{$prompt_type} || $prompts->{aisuggestion};

if ($prompt_type eq 'translate') {
    my $from_lang = $transFrom || 'English';
    my $to_lang = $transTo || 'Spanish';
    $prompt .= " from $from_lang to $to_lang";
}

my $prompt_prefix = 'Give me response for the prompt as HTML with only paragraph tags: ';
$prompt = $prompt_prefix . $prompt;

my $model_config = $prompt_type eq 'autocomplete' ? $autocomplete_model : $general_model;

my $ua = LWP::UserAgent->new;
my $request = HTTP::Request->new(
    'POST',
    $api_url,
    [
        'Content-Type'  => 'application/json',
        'Authorization' => "Bearer $openai_api_key",
    ],
    encode_json({
        model       => $model_config->{modelName},
        messages    => [
            { role => 'system', content => $prompt },
            { role => 'user', content => $rawText },
        ],
        max_tokens  => $model_config->{maxToken},
        temperature => $model_config->{temperature},
    })
);

my $response = $ua->request($request);
my $output;

if ($response->is_success) {
    my $content = eval { decode_json($response->decoded_content) };
    if ($@) {
        $m->abort("Failed to decode JSON response: $@");
    }

    $output = $content->{choices}[0]{message}{content} || 'No suggestion available';
} else {
    RT->Logger->error("OpenAI API error: " . $response->status_line);
    $m->abort("Error calling OpenAI API: " . $response->status_line);
}

print encode_json({ suggestion => $output });

</%INIT>
