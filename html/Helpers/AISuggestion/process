<%ARGS>
$rawText        => ''
$callType       => 'autocomplete'
$translateFrom  => ''
$translateTo    => ''
$provider       => RT->Config->Get('DefaultProvider') || 'OpenAI'
</%ARGS>

<%INIT>
use Try::Tiny;
use JSON;
use RT::Extension::AI::Utils;
use RT::Extension::AI::Providers::Factory;

my $result_payload;

try {
    my $config = RT::Extension::AI::Utils->get_provider_config($provider);
    unless ($config) {
        die "Configuration for provider '$provider' not found.";
    }

    my $prompt = RT->Config->Get(ucfirst($callType));

    if ($callType eq 'translate') {
        my $from_lang = $translateFrom || 'English';
        my $to_lang   = $translateTo   || 'Spanish';
        $prompt .= " Translate from $from_lang to $to_lang.";
    }

    my $model_config = $config->{models}->{$callType} || $config->{models}->{general};

    my $provider_instance = RT::Extension::AI::Providers::Factory->get_provider($provider);

    my $response = $provider_instance->process_request(
        prompt       => $prompt,
        raw_text     => $rawText,
        model_config => $model_config,
    );

    if ( $response->{success} ) {
        $result_payload = {
            success => 1,
            result  => $response->{result},
        };
    } else {
        $result_payload = {
            success => 0,
            error   => $response->{error} || "Unknown error",
        };
        RT->Logger->error("AI request failed: " . $response->{error});
    }
} catch {
    RT::Logger->error("Failed to process AI request: $_");
    $result_payload = {
        success => 0,
        error   => "Internal server error: $_",
    };
};

my $result_text = $result_payload->{result} || '';

$m->out( $result_text );
$m->abort();
</%INIT>
